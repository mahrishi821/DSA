
#include <bits/stdc++.h>
#include <climits>
using namespace std;

// int solve(vector<int> coins, int amt,vector<int>& dp)
// {
//     //base case
//     if (amt == 0)
//         return 0;

//     if (amt < 0)
//         return INT_MAX;
    
//     if(dp[amt]!=-1)
//         return dp[amt];

//     //recursive relation
//     int mini = INT_MAX;
//     for (int i = 0; i < coins.size(); i++) {
//         int ans = solve(coins, amt-coins[i],dp);
//         if (ans != INT_MAX)
//             mini = min(mini, ans + 1);
//     }
//     dp[amt]=mini;

//     return mini;
// }
int solveTab(vector<int> &num,int x)
{
    vector<int> dp(x+1,INT_MAX);      
    if(x==0)
        return 0;
    dp[0]=0;

    int mini=INT_MAX;
    // solving using tabulation method
    for(int i=1;i<=x+1;i++)
    {
        for(int j=0; j<num.size();j++)
        {
            if(i-num[j]>0 && i-num[j]!=INT_MAX)
            {
                solveTab(num);
               
            }
        }
    }
}
int minimumElements(vector<int> &num, int x) {
    // Write your code here.
    vector<int> dp(x+1, -1);
    // for(int i=0;i<n;i++)
    // {
    //     dp[i]=-1;
    // }
    int ans = solve(num, x,dp);

    if (ans != INT_MAX)
        return ans;
    else
        return -1;
}

