#include <bits/stdc++.h> 

// approch of recursion + memoization
// int solve(vector<int> &arr,int &tar,vector<int> &dp )
// {
//  //base case
//  //1. if target =0
//  if(tar==0)
//     return 1;
//  //2.if target become negative
//  if(tar<0)
//     return 0;
//  //recursive call
//  if(dp[tar]!=-1)
//     return dp[tar];

//  int ans=0;
//  for(int i=0;i<arr.size();i++)
//  {
//     int temp=tar-arr[i];
//     ans+=solve(arr,temp,dp);
//  }
//  dp[tar]=ans;
//  return dp[tar];
// }


// approch 2 from tabulation
int solve(vector<int> &num, int tar)
{
    // we are adding here so in tabulation method use dp value equall to zero
    vector<int> dp(tar+1,0);
    dp[0]=1;

    // thise loop will traves over target variable
    for(int i=1;i<=tar;i++)
    {
        //this loop will traves over num array
        for(int j=0;j<num.size();j++)
        {
            if((i-num[j])>=0)
            dp[i]+=dp[i-num[j]];
        }
    }
    return dp[tar];
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    
    return solve(num,tar);
}




