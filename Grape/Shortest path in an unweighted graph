#include<unordered_map>
#include<vector>
#include<list>
using namespace std;
vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// Write your code here
	unordered_map<int,list<int>> adj;
	// creating adjency list
	for(int i=0;i<edges.size();i++)
	{
		int u=edges[i].first;
		int v=edges[i].second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	unordered_map<int ,bool> visited;
	unordered_map<int,int> parent;
	// here s is the source node t is the destination node
	queue<int> q;
	q.push(s);
	visited[s]=true;
	parent[s]=-1;

	while(!q.empty())
	{
		int frontNode=q.front();
		q.pop();

		for( auto i : adj[frontNode])
		{
			if(!visited[i])
			{
				q.push(i);
				visited[i]=true;
				parent[i]=frontNode;
			}
		}
	}
	// creating the answer vector 
	vector<int> ans;

	int trvaversel=t;
	ans.push_back(t);
	while(trvaversel!=s)
	{
		int temp;
		temp=parent[trvaversel];
		ans.push_back(temp);
		trvaversel=temp;
	}

	// reverse the answer
	reverse(ans.begin(),ans.end());
	return ans;
}
