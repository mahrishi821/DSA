// // Online C++ compiler to run C++ program online
#include <iostream>
#include <queue>

class node {
public:
    int data;
    node* left;
    node* right;
    node(int d) {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node* buildTree(node* root) {
    // for data for the root node
    std::cout << "\n Enter the data to insert: ";
    int data;
    std::cin >> data;
    if (data == -1)
        return NULL;

    root = new node(data); // Assigning a new node to root

    std::cout << "Enter the data to insert to the left of tree " << data << ": ";
    root->left = buildTree(root->left); // Pass root->left without modifying root

    std::cout << "Enter the data to insert to the right of tree " << data << ": ";
    root->right = buildTree(root->right); // Pass root->right without modifying root

    return root;
}

void levelOrderTransversal(node* root) {
    // for level Order Transversal
    std::queue<node*> q;
    q.push(root);
    q.push(NULL);
    while (!q.empty()) {
        node* temp = q.front();

        q.pop();
        if (temp == NULL) {
            std::cout << std::endl;
            if (!q.empty()) {
                q.push(NULL);
            }
        }
        else {
            std::cout << temp->data << " ";
            if (temp->left)
                q.push(temp->left);
            if (temp->right)
                q.push(temp->right);
        }
    }
}
void inOrder(node* root)
{
   
    // base case 
    if(root==NULL)
        return;
    
    //LNR
    // N means print
    inOrder(root->left);
    std::cout<<root->data<<" ";
    inOrder(root->right);
}
void preOrder(node* root)
{
    
    // base case 
    if(root==NULL)
        return;
    
    //NLR
    // N means print
    
    std::cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}
void postOrder(node* root)
{
    
    if(root==NULL)
        return ;
    
    //LRN
    
    postOrder(root->left);
    postOrder(root->right);
    std::cout<<root->data<<" ";
}

void buildFromlevelOrder(node* &root)
{
    std::queue<node*> q;
    int data;
    
    std::cout<<"Enter data for root "<<std::endl;
    std::cin>>data;
    root=new node(data);
    q.push(root);
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        std::cout<<"Enter the left node for "<<temp->data<<std::endl;
        int leftData;
        std::cin>>leftData;
        if(leftData!=-1)
        {
            temp->left=new node(leftData);
            q.push(temp->left);
        }
        std::cout<<"Enter the Right node for "<<temp->data<<std::endl;
        int rightData;
        std::cin>>rightData;
        if(rightData!=-1)
        {
            temp->right=new node(rightData);
            q.push(temp->right);
        }
        
    }
    
    
}

int main() {
    // Write C++ code here
    // std::cout << "Try programiz.pro";
    node* root = NULL;
    buildFromlevelOrder(root);
    // root = buildTree(root);
    // // printing the traversal
    // //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    // std::cout << "Level Order Traversal: "<<std::endl;
    levelOrderTransversal(root);
    // printing the order trversal
    //1 3 7 11 6 12 18 5 -1 -1 -1 -1 -1 -1 -1 -1 -1
    std::cout<<std::endl;
    std::cout<<"\n inorder"<<std::endl;
    inOrder(root);
    std::cout<<"\n Pretorder"<<std::endl;
    preOrder(root);
    std::cout<<"\n Postorder"<<std::endl;
    postOrder(root);

    return 0;
}
