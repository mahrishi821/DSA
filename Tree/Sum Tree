class Solution
{   private:
    pair<bool,int>isSumTreeFast(Node* root)
    {
        //base case
        if(root==NULL)
        {
            pair<bool,int> p=make_pair(true,0);
            return p;
        }
        if(root->left==NULL && root->right==NULL)
        {
            pair<bool,int> p=make_pair(true,root->data);
            return p; 
        }
        //recursive condision
        pair<bool,int> leftAns=isSumTreeFast(root->left);
        pair<bool,int> rightAns=isSumTreeFast(root->right);
        
        
        bool ans=root->data==leftAns.second+rightAns.second;
        
        if(ans && leftAns.first && rightAns.first)
        {
            pair<bool,int> Ans=make_pair(true,2*root->data);
            return Ans;
        }
        else
        {
           pair<bool,int> Ans=make_pair(false,2*root->data);
            return Ans; 
        }
    }
    public:
    bool isSumTree(Node* root)
    {
         // Your code here
         return isSumTreeFast( root).first;
    }
};
