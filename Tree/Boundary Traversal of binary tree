class Solution {
public:

    void traverseLeft(Node* root, vector<int> &ans) {
        if (root == nullptr || (root->left == nullptr && root->right == nullptr)) {
            return;
        }
        
        ans.push_back(root->data);
        
        if (root->left) {
            traverseLeft(root->left, ans);
        } else {
            traverseLeft(root->right, ans);
        }
    }

    void traverseRight(Node* root, vector<int> &ans) {
        if (root == nullptr || (root->left == nullptr && root->right == nullptr)) {
            return;
        }

        if (root->right) {
            traverseRight(root->right, ans);
        } else {
            traverseRight(root->left, ans);
        }
        
        ans.push_back(root->data);
    }

    void traverseLeaves(Node* root, vector<int> &ans) {
        if (root == nullptr) {
            return;
        }

        if (root->left == nullptr && root->right == nullptr) {
            ans.push_back(root->data);
            return;
        }

        traverseLeaves(root->left, ans);
        traverseLeaves(root->right, ans);
    }

    vector<int> boundary(Node* root) {
        vector<int> ans;

        if (root == nullptr) {
            return ans;
        }

        ans.push_back(root->data);

        traverseLeft(root->left, ans);
        traverseLeaves(root->left, ans);
        traverseLeaves(root->right, ans);
        traverseRight(root->right, ans);

        return ans;
    }
};
