/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 ListNode* reverse(ListNode* node)
 {
    ListNode* prev =NULL;
    ListNode* curr= node;
    ListNode* next=NULL;

    while(curr!=NULL)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
 }
ListNode* sumList(ListNode* num1,ListNode* num2)
{
    ListNode* temp=new ListNode(0);
    ListNode* dummyHead=temp;
    int carry=0;
    while(num1!=NULL || num2!=NULL)
    {
        int x= (num1!=NULL) ? num1->val: 0;
        int y= (num2!=NULL) ? num2->val: 0;
        int sum=x+y+carry;
        carry=sum/10;
        temp->next=new ListNode(sum%10);
        temp=temp->next;
        if(num1!=NULL) 
            num1=num1->next;
        if(num2!=NULL) 
            num2=num2->next;
    }

    if(carry>0)
    {
        ListNode* value=new ListNode(carry);
        temp->next=value;
    }
    dummyHead=dummyHead->next;
    return dummyHead;
}
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

       ListNode* num1= reverse(l1);
       ListNode* num2= reverse(l2);
       ListNode* sum=sumList(num1,num2);
       return (reverse(sum));
    }
};
