
class Node {
public:
    int data;
    Node *next, *bottom;
};
 
Node* head = NULL;

Node* merge(Node* a, Node* b)
{

    if (a == NULL)
        return b;

    if (b == NULL)
        return a;

    Node* result;
 
    if (a->data < b->data) {
        result = a;
        result->bottom = merge(a->bottom, b);
    }
 
    else {
        result = b;
        result->bottom = merge(a, b->bottom);
    }
    result->next = NULL;
    return result;
}
 
Node* flatten(Node* root)
{
 
    // Base Cases
    if (root == NULL || root->next == NULL)
        return root;
 
    // Recur for next list
    root->next = flatten(root->next);
 
    // Now merge
    root = merge(root, root->next);
 
    // Return the root
    // it will be in turn merged with its left
    return root;
}
 

Node* push(Node* head_ref, int data)
{
 
    // Allocate the Node & Put in the data
    Node* new_node = new Node();
 
    new_node->data = data;
    new_node->next = NULL;
 
    // Make next of new Node as head
    new_node->bottom = head_ref;
 
    // Move the head to point to new Node
    head_ref = new_node;
 
    return head_ref;
}
 
