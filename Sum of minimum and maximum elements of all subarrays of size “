#include <deque>
#include <vector>

using namespace std;

long long sumOfMaxAndMin(vector<int> &nums, int n, int k) {
    deque<int> maxi;
    deque<int> mini;
    long long ans = 0;

    // Find maximum and minimum elements in the first subarray of size k
    for (int i = 0; i < k; i++) {
        // Remove elements smaller than the current element from the back of deque
        while (!maxi.empty() && nums[maxi.back()] <= nums[i])
            maxi.pop_back();
        while (!mini.empty() && nums[mini.back()] >= nums[i])
            mini.pop_back();

        // Add current index to deque
        maxi.push_back(i);
        mini.push_back(i);
    }

    // Add the sum of maximum and minimum elements of the first subarray
    ans += nums[maxi.front()] + nums[mini.front()];

    // Process the remaining subarrays
    for (int i = k; i < n; i++) {
        // Remove elements out of the current window
        while (!maxi.empty() && i - maxi.front() >= k)
            maxi.pop_front();
        while (!mini.empty() && i - mini.front() >= k)
            mini.pop_front();

        // Add elements for the new window
        while (!maxi.empty() && nums[maxi.back()] <= nums[i])
            maxi.pop_back();
        while (!mini.empty() && nums[mini.back()] >= nums[i])
            mini.pop_back();

        maxi.push_back(i);
        mini.push_back(i);

        // Add the sum of maximum and minimum elements of the current window
        ans += nums[maxi.front()] + nums[mini.front()];
    }

    return ans;
}

