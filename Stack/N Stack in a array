#include <bits/stdc++.h> 

class NStack {
    int *arr;
    int *top;
    int *next;
    int n, s;
    int freeSpot;
public:
    // Initialize your data structure.
    NStack(int N, int S) {
        this->n = N;
        this->s = S;
        arr = new int[s];
        top = new int[n];
        next = new int[s];
        for (int i = 0; i < s; i++) {
            next[i] = i + 1;
        }
        next[s - 1] = -1;
        for (int i = 0; i < n; i++) {
            top[i] = -1; // Initialize top of each stack to -1 (empty)
        }
        freeSpot = 0;
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m) {
        if (freeSpot == -1 || m > s) // Check if the stack is full or if m is out of bounds
            return false;
        
        int index = freeSpot;
        freeSpot = next[index];
        arr[index] = x;
        next[index] = top[m - 1];
        top[m - 1] = index;
        return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m) {
        if (m > s || top[m - 1] == -1) // Check if m is out of bounds or if the stack is empty
            return -1;
        
        int index = top[m - 1];
        int popped = arr[index];
        top[m - 1] = next[index];
        next[index] = freeSpot;
        freeSpot = index;
        return popped;
    }

    // Destructor to deallocate memory
    ~NStack() {
        delete[] arr;
        delete[] top;
        delete[] next;
    }
};
