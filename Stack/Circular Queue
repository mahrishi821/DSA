#include <bits/stdc++.h> 
class CircularQueue {
public:
    // Initialize your data structure.
    int *arr;
    int front;
    int rear;
    int size;
   
    CircularQueue(int n) {
        // Write your code here.
        arr = new int[n];
        front = rear = -1;
        size = n;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value) {
        // Write your code here.
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size)) {
            return false; // Queue is full
        }
        else if (front == -1) {
            front = rear = 0;
        }
        else {
            rear = (rear + 1) % size;
        }
        arr[rear] = value;
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue() {
        // Write your code here.
        if (front == -1) {
            return -1; // Queue is empty
        }
        int ans = arr[front];
        arr[front] = -1;
        if (front == rear) {
            front = rear = -1;
        }
        else if (front == size - 1) {
            front = 0;
        }
        else {
            front = (front + 1) % size;
        }
        return ans;
    }
};
